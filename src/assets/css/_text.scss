@use "sass:map";
@use "sass:meta";
@use 'variables' as *;
@use 'colors' as c;
/* =========================================================
   TEXT UTILITIES (Standalone)
   Depends on: _variables.scss, _colors.scss
   ---------------------------------------------------------
   Groups included:
   1) Text alignment
   2) Text transform
   3) Font weight
   4) Font style
   5) Font size
   6) Line height
   7) Letter spacing
   8) Text color (from palettes)
   9) Truncate / Ellipsis
   10) Text decoration
   11) White space / wrap
   12) Word break
   13) Text shadow
   ========================================================= */

/* ---------- Defaults (override via your _variables.scss) ---------- */
$font-size-scale: (
  xs: 0.75rem,    // 12px
  sm: 0.875rem,   // 14px
  md: 1rem,       // 16px
  lg: 1.125rem,   // 18px
  xl: 1.25rem,    // 20px
  2xl: 1.5rem,    // 24px
  3xl: 1.875rem,  // 30px
  4xl: 2.25rem    // 36px
) !default;

$line-height-scale: (
  1: 1,
  1_1: 1.1,
  1_2: 1.2,
  1_3: 1.3,
  1_4: 1.4,
  1_5: 1.5,
  1_6: 1.6,
  1_8: 1.8,
  2: 2
) !default;

$letter-spacing-scale: (
  tight: -0.02em,
  normal: 0,
  wide: 0.02em,
  wider: 0.04em
) !default;

/* Nếu _colors.scss có các biến $primary-50..900, $secondary-50..900 */
$color-palettes: primary, secondary, success, warning, danger, gray !default;
$color-steps: 50,100,200,300,400,500,600,700,800,900 !default;

/* Text shadow tokens */
$text-shadow-scale: (
  sm: 0 1px 1px rgba(0, 0, 0, 0.10),
  md: 0 2px 3px rgba(0, 0, 0, 0.15),
  lg: 0 4px 6px rgba(0, 0, 0, 0.20)
) !default;

/* =========================================
   1) Text alignment
   ========================================= */
.text-left   { text-align: left; }
.text-center { text-align: center; }
.text-right  { text-align: right; }
.text-justify{ text-align: justify; }
.text-start  { text-align: start; }
.text-end    { text-align: end;   }

/* =========================================
   2) Text transform
   ========================================= */
.tt-uppercase  { text-transform: uppercase; }
.tt-lowercase  { text-transform: lowercase; }
.tt-capitalize { text-transform: capitalize; }

/* =========================================
   3) Font weight
   ========================================= */
.fw-100 { font-weight: 100; }
.fw-200 { font-weight: 200; }
.fw-300 { font-weight: 300; }
.fw-400, .fw-normal { font-weight: 400; }
.fw-500 { font-weight: 500; }
.fw-600 { font-weight: 600; }
.fw-700, .fw-bold { font-weight: 700; }
.fw-800 { font-weight: 800; }
.fw-900 { font-weight: 900; }
.fw-light { font-weight: 300; }

/* =========================================
   4) Font style
   ========================================= */
.fst-normal { font-style: normal; }
.fst-italic { font-style: italic; }

/* =========================================
   5) Font size
   ========================================= */
@each $k, $v in $font-size-scale {
  .fs-#{$k} { font-size: $v; }
}

/* =========================================
   6) Line height
   ========================================= */
@each $k, $v in $line-height-scale {
  .lh-#{$k} { line-height: $v; }
}

/* =========================================
   7) Letter spacing
   ========================================= */
@each $k, $v in $letter-spacing-scale {
  .ls-#{$k} { letter-spacing: $v; }
}

/* =========================================
   8) Text color (from palettes)
   ========================================= */
@function get-muted-gray() {
  // ưu tiên gray -> gray-light -> gray-dark
  @each $name in gray, gray-light, gray-dark {
    @if map.has-key(c.$color-palettes-map, $name) {
      $m: map.get(c.$color-palettes-map, $name);
      @if (meta.type-of($m) == 'map') and map.has-key($m, 500) {
        @return map.get($m, 500);
      }
    }
  }
  @return rgba(0,0,0,.6); // fallback
}

.text-muted { color: get-muted-gray(); }


/* =========================================
   9) Truncate / Ellipsis
   ========================================= */
.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Multi-line clamp */
@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@for $i from 2 through 10 {
  .text-clamp-#{$i} { @include text-clamp($i); }
}

/* =========================================
   10) Text decoration
   ========================================= */
.text-underline     { text-decoration: underline; }
.text-line-through  { text-decoration: line-through; }
.text-no-underline  { text-decoration: none; }

/* =========================================
   11) White space / wrap
   ========================================= */
.text-nowrap    { white-space: nowrap; }
.text-pre       { white-space: pre; }
.text-pre-line  { white-space: pre-line; }
.text-pre-wrap  { white-space: pre-wrap; }

/* =========================================
   12) Word break
   ========================================= */
.text-break {
  overflow-wrap: anywhere;
  word-break: break-word;
}
.text-keep {
  overflow-wrap: normal;
  word-break: normal;
}

/* =========================================
   13) Text shadow
   ========================================= */
@each $k, $v in $text-shadow-scale {
  .text-shadow-#{$k} { text-shadow: $v; }
}
